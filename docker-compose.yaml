services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
  
  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic SocialMediaTopic --replication-factor 1 --partitions 1
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  
  mongo-container:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - "mongodb_data_container:/data/db"
    restart: always
  
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=postgrespw
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      
  command-svc:
    image: oxyprogrammer/command-svc:latest
    build:
      context: .
      dockerfile: src/Post.Cmd/Post.Cmd.Api/Dockerfile
    # ports:
     # - "5001:8080"  # map port 5001 on host to port 8080 in the container
    networks:
      - default
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - KAFKA_TOPIC=SocialMediaTopic
    depends_on:
      - mongo-container  

  lookup-svc:
    image: oxyprogrammer/lookup-svc:latest
    build:
      context: .
      dockerfile: src/Post.Query/Post.Query.Api/Dockerfile
    # ports:
      # - "5002:8080"  # Map port 5002 on host to port 8080 in the container
    networks:
      - default
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - KAFKA_TOPIC=SocialMediaTopic
    depends_on:
      - postgres  

  gateway-svc:
    image: src/oxyprogrammer/gateway-svc:latest
    build:
      context: .
      dockerfile: src/CQRS.Gateway/Dockerfile
    ports:
      - "5000:8080"  # Map port 5000 on host to port 8080 in the container
    networks:
      - default
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - lookup-svc
      - command-svc
      
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data_container:
    driver: local
  pgdata:
    driver: local
   
networks:
  default:
      name: cqrsplusnetwork